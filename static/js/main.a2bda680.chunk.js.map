{"version":3,"sources":["Components/Header.js","Components/TodoItem.js","Components/TodoData.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","TodoItem","props","style","todo","completed","fontStyle","color","textDecoration","type","onChange","handleChange","id","text","onClick","handleDelete","TodoData","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","bind","assertThisInitialized","handleAdd","setState","preState","map","indexNum","tempTodo","indexOf","splice","length","push","document","getElementById","value","updateTodo","_this2","todoComponents","item","Components_TodoItem","key","placeholder","Component","App","Components_Header","Components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2bda680.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(){\r\n    return(\r\n        <div  className=\"navbar\">\r\n            <h1>To-Do List</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nfunction TodoItem(props){\r\n    const completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"lightgray\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n    return(\r\n        <div className=\"todoList\">\r\n            <p style={props.todo.completed ? completedStyle : null}><input type=\"checkbox\" \r\n            onChange={function(){\r\n                props.handleChange(props.todo.id)\r\n            }}/>{props.todo.text} <button onClick={function(){\r\n                props.handleDelete(props.todo.id)\r\n            }} >Delete</button></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem;","const TodoData = [\r\n    \r\n]\r\n\r\nexport default TodoData;","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport TodoData from './TodoData';\r\n\r\nclass Main extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            todos: TodoData\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleAdd = this.handleAdd.bind(this)\r\n    }\r\n\r\n    handleChange(id){\r\n        this.setState(preState => {\r\n            const updateTodo = preState.todos.map(todo => {\r\n                if(todo.id === id){\r\n                    todo.completed = !todo.completed    \r\n                }\r\n                return todo\r\n            })\r\n            return{\r\n                todos: updateTodo\r\n            }\r\n        })\r\n    }\r\n\r\n    handleDelete(id){\r\n\r\n        this.setState(preState => {\r\n            let indexNum\r\n            const tempTodo = preState.todos.map(todo => {\r\n                if(todo.id === id){\r\n                    indexNum = preState.todos.indexOf(todo)\r\n                }\r\n            return todo\r\n            })\r\n\r\n            tempTodo.splice(indexNum, 1)\r\n\r\n            const updateTodo = tempTodo.map(todo => {\r\n                return todo;\r\n            })\r\n            \r\n            return{\r\n                todos: updateTodo\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    handleAdd(){\r\n        // console.log(document.getElementById(\"textbox\").value)\r\n        this.setState(preState => {\r\n            const indexNum = preState.todos.length\r\n            const tempTodo = preState.todos.map(todo => {\r\n                // if(todo.id === id){\r\n                //     indexNum = preState.todos.length + 1\r\n                // }\r\n                return todo\r\n            })\r\n\r\n            tempTodo.push({\r\n                id: indexNum,\r\n                text: document.getElementById(\"textbox\").value,\r\n                completed: false\r\n            })\r\n\r\n            const updateTodo = tempTodo.map(todo => {\r\n                return todo;\r\n            })\r\n            \r\n            document.getElementById(\"textbox\").value = \"\"\r\n\r\n            return{\r\n                todos: updateTodo\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    render(){\r\n        const todoComponents = this.state.todos.map(item => <TodoItem key={item.id} todo={item} handleChange={this.handleChange} handleDelete={this.handleDelete} />)\r\n        return(\r\n            <div>\r\n                <input type=\"text\" placeholder=\"Enter Todo Item\" id=\"textbox\"/><button onClick={this.handleAdd} id=\"submitBtn\">Submit</button>\r\n                {todoComponents}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Header from './Components/Header'\nimport Main from './Components/Main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}